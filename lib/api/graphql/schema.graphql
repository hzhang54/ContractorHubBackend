# ProTip: Before uploading, put the schema in the AWS AppSync Console to make sure that it is valid
type Query {
	# This is going to call a lambda function
	getRecipeIdea(ingredients: [String]!): String @aws_cognito_user_pools
	getUser(id: String!): User @aws_cognito_user_pools
	getRecipe(id: String): Recipe @aws_cognito_user_pools
	listRecipes: [Recipe]! @aws_cognito_user_pools
}

type Mutation {
	updateUser(input: UserInput!): User @aws_cognito_user_pools
	createRecipe(input: RecipeCreateInput!): Recipe @aws_cognito_user_pools
	updateRecipe(input: RecipeUpdateInput!): Recipe @aws_cognito_user_pools
	deleteRecipe(id: String!): Recipe @aws_cognito_user_pools
}

type Recipe {
	id: ID!
	coverImage: String!
	title: String!
	description: String!
	servings: Int!
	owner: String!
	ingredientsText: String! # String generated from Quill.js
	stepsText: String! # String generated from Quill.js
}

input RecipeCreateInput {
	coverImage: String!
	title: String!
	description: String!
	servings: Int!
	ingredientsText: String!
	stepsText: String!
}

input RecipeUpdateInput {
	id: ID!
	coverImage: String!
	title: String!
	description: String!
	servings: Int!
	ingredientsText: String!
	stepsText: String!
}

type User {
	id: ID!
	username: String!
	email: AWSEmail!
	profilePicture: AWSURL
	displayName: String
	stripeCustomerId: String
	subscriptionStatus: PLAN_STATUS_ENUM!
}

input UserInput {
	id: ID!
	profilePicture: AWSURL
	displayName: String
}
# prospective:Signed up, new to platform. Hasn't ever subscribed
# trialing:Started n-day free trial. Assumes card on file
# active:They're paid
# past_due:They're unpaid, more attempts will automatically be made
# unpaid:Stripe is done attempting. Revoke access here
# canceled:Customer canceled. Still signed up. Has to resubscribe

enum PLAN_STATUS_ENUM {
	prospective
	trialing
	active
	past_due
	unpaid
	canceled
}
